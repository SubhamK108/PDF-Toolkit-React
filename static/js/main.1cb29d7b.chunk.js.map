{"version":3,"sources":["components/Encryptor.tsx","components/Home.tsx","components/ImageToPdf.tsx","components/merger/FileListDisplay.tsx","components/shared/UploadFeedback.tsx","components/shared/SubmitFeedback.tsx","components/merger/Merger.tsx","components/PageDeleter.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Encryptor","className","Home","to","ImageToPdf","FileListDisplay","props","style","marginBottom","FileArray","map","file","Data","name","onClick","e","RemoveFile","title","paddingLeft","cursor","indexOf","MoveFileUp","length","MoveFileDown","Id","UploadLoader","fontSize","UploadMessage","marginTop","UploadDone","ErrorMessage","SubmitProgress","SubmitMessage","SubmitButton","Submit","background","Merger","initialState","Pdfs","IsUploadInitiated","IsUploadCompleted","IsSubmitCompleted","Error","session","useState","sessionState","setSessionState","onInputFileChange","inputFileChange","prevState","i","size","prevstate","type","currentFile","Math","random","concat","onChange","target","files","multiple","accept","tempFileArray","filter","x","index","splice","PageDeleter","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1cb29d7b.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\nconst Encryptor: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Encryptor</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Encryptor;","import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Toolkit</h1>\n            </div>\n\n            <div className=\"tools\">\n                <h1>Available Tools</h1>\n            </div>\n\n            <div className=\"tools-section\">\n                <Link to=\"/pdfmerger\">\n                    <button className=\"button\">Merger</button>\n                </Link>\n\n                <Link to=\"/pdfencryptor\">\n                    <button className=\"button\">Encryptor</button>\n                </Link>\n\n                <Link to=\"/pdfpagedeleter\">\n                    <button className=\"button\">Page Deleter</button>\n                </Link>\n                \n                <Link to=\"imagetopdf\">\n                    <button className=\"button\">Image to PDF</button>\n                </Link>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Home;","import React, { ReactElement } from \"react\";\n\nconst ImageToPdf: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>Image To PDF</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageToPdf;","import React, { ReactElement } from \"react\";\nimport { UploadedFile } from \"../models/UploadedFile\";\n\ninterface FileListDisplayProps {\n    FileArray: UploadedFile[] | null,\n    RemoveFile: Function,\n    MoveFileUp: Function,\n    MoveFileDown: Function\n};\n\nconst FileListDisplay: React.FC<FileListDisplayProps> = (props): ReactElement => {\n    return (\n        <div style={{ marginBottom: 35 }}>\n            {(props.FileArray || []).map((file: UploadedFile) => (\n                <div key={file.Id} className=\"file-display\">\n                    <p>{file.Data.name}</p>\n                    <span onClick={e => props.RemoveFile(file)} className=\"icon solid fas fa-times-circle\" title=\"Remove File\" style={{ paddingLeft: 20, cursor: \"pointer\" }}></span>\n                    {props.FileArray!.indexOf(file) > 0 ? <span onClick={e => props.MoveFileUp(file)} className=\"icon solid fas fa-arrow-circle-up\" title=\"Move File Up\" style={{ paddingLeft: 10, cursor: \"pointer\" }}></span> : \"\"}\n                    {props.FileArray!.indexOf(file) < (props.FileArray!.length - 1) ? <span onClick={e => props.MoveFileDown(file)} className=\"icon solid fas fa-arrow-circle-down\" title=\"Move File Down\" style={{ paddingLeft: 10, cursor: \"pointer\" }}></span> : \"\"}\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default FileListDisplay;","import React, { ReactElement } from \"react\";\n\ninterface UploadLoaderProps {\n    UploadMessage: string\n};\n\ninterface UploadDoneProps extends UploadLoaderProps {\n    ErrorMessage: string\n};\n\nconst UploadLoader: React.FC<UploadLoaderProps> = (props): ReactElement => {\n    return (\n        <div>\n            <h2 style={{ fontSize: 21 }} className=\"sub-tools\">{props.UploadMessage}</h2>\n            <div style={{ marginTop: 60 }} className=\"loader\">Loading...</div>\n        </div>\n    );\n}\n\nconst UploadDone: React.FC<UploadDoneProps> = (props): ReactElement => {\n    return (\n        <div>\n            <h2 style={{ fontSize: 21 }} className=\"sub-tools\">{props.UploadMessage}</h2>\n            <h2 style={{ fontSize: 21 }} className=\"sub-tools\">{props.ErrorMessage}</h2>\n        </div>\n    );\n}\n\nexport { UploadLoader, UploadDone }","import React, { ReactElement } from \"react\";\n\ninterface SubmitProgressProps {\n    SubmitMessage: string\n};\n\ninterface SubmitButtonProps {\n    Submit: Function\n};\n\nconst SubmitProgress: React.FC<SubmitProgressProps> = (props): ReactElement => {\n    return (\n        <div>\n            <div className=\"sub-tools\">\n                <h2 style={{ fontSize: 21 }}>{props.SubmitMessage}</h2>\n            </div>\n            <div style={{ marginTop: 50 }} className=\"loader\">Loading...</div>\n        </div>\n    );\n}\n\nconst SubmitButton: React.FC<SubmitButtonProps> = (props): ReactElement => {\n    return (\n        <div className=\"sub-tools\">\n            <button onClick={e => props.Submit()} className=\"button-secondary\"><i style={{ background: \"inherit\" }} className=\"icon solid fas fa-check-circle\"></i> &nbsp;Submit</button>\n        </div>\n    );\n}\n\nexport { SubmitProgress, SubmitButton }","import React, { ReactElement, useState } from \"react\";\nimport { UploadedFile } from \"../models/UploadedFile\";\nimport FileListDisplay from \"./FileListDisplay\";\nimport { UploadLoader, UploadDone } from \"../shared/UploadFeedback\";\nimport { SubmitButton, SubmitProgress } from \"../shared/SubmitFeedback\";\nimport { MergerSession, MergerSessionState } from \"./MergerData\";\n\nconst Merger: React.FC = (): ReactElement => {\n    const initialState: MergerSessionState = {\n        Pdfs: [],\n        IsUploadInitiated: false,\n        IsUploadCompleted: false,\n        IsSubmitCompleted: false,\n        UploadMessage: \"\",\n        ErrorMessage: \"\",\n        SubmitMessage: \"\",\n        Error: false\n    };\n\n    const session: MergerSession = {\n        MaxFilesAllowed: 20,\n        MaxSizeAllowed: 20971520,\n        FileTypeAllowed: \"application/pdf\"\n    };\n\n    const [sessionState, setSessionState] = useState<MergerSessionState>(initialState);\n\n    const RefreshApp = (): void => {\n        setSessionState(initialState);\n    }\n\n    const onInputFileChange = (inputFileChange: FileList | null): void => {\n        RefreshApp();\n\n        setSessionState(prevState => ({\n            ...prevState,\n            IsUploadInitiated: true,\n            UploadMessage: \"Uploading your files... ⏳\"\n        }));\n\n        if (inputFileChange!.length > session.MaxFilesAllowed) {\n            setSessionState(prevState => ({\n                ...prevState,\n                UploadMessage: \"Upload failed! ❌\",\n                ErrorMessage: `Max ${session.MaxFilesAllowed} PDF files allowed!`,\n                Error: true\n            }));\n\n            return;\n        } else if (inputFileChange!.length === 1) {\n            setSessionState(prevState => ({\n                ...prevState,\n                UploadMessage: \"\",\n                ErrorMessage: \"Just 1 PDF file uploaded which is not enough! You have to upload at least 2 files. 😕\",\n                Error: true\n            }));\n\n            return;\n        }\n\n        for (let i: number = 0; i < inputFileChange!.length; i++) {\n            if (inputFileChange![i].size > session.MaxSizeAllowed) {\n                setSessionState(prevstate => ({\n                    ...prevstate,\n                    UploadMessage: \"Upload failed! ❌\",\n                    ErrorMessage: \"Max 20 MB size allowed for each file!\",\n                    Error: true\n                }));\n\n                return;\n            }\n\n            if (inputFileChange![i].type !== session.FileTypeAllowed) {\n                setSessionState(prevState => ({\n                    ...prevState,\n                    UploadMessage: \"Upload failed! ❌\",\n                    ErrorMessage: \"You can only upload PDF files!\",\n                    Error: true\n                }));\n\n                return;\n            }\n\n            let currentFile: UploadedFile = {\n                Id: (Math.random() + Math.random()),\n                Data: inputFileChange![i]\n            };\n\n            setSessionState(prevState => ({\n                ...prevState,\n                Pdfs: prevState.Pdfs!.concat(currentFile)\n            }));\n        }\n\n        setSessionState(prevState => ({\n            ...prevState,\n            UploadMessage: `${inputFileChange!.length} PDF files uploaded. ✅`,\n            IsUploadCompleted: true\n        }));\n    }\n\n    const RemoveFile = (file: UploadedFile): void => {\n        let tempFileArray: UploadedFile[] | null = sessionState.Pdfs!.filter(x => x.Id !== file.Id);\n\n        setSessionState(prevState => ({\n            ...prevState,\n            Pdfs: tempFileArray\n        }));\n\n        if (sessionState.Pdfs!.length - 1 === 1) {\n            setSessionState(prevState => ({\n                ...prevState,\n                UploadMessage: \"\",\n                ErrorMessage: \"Not enough PDF files left! At least 2 files are needed. 😕\",\n                Error: true\n            }));\n        } else {\n            setSessionState(prevState => ({\n                ...prevState,\n                UploadMessage: `${sessionState.Pdfs!.length - 1} PDF files are left. ✅`\n            }));\n        }\n    }\n\n    const MoveFileUp = (file: UploadedFile): void => {\n        let index: number = sessionState.Pdfs!.indexOf(file);\n        let tempFileArray: UploadedFile[] | null = sessionState.Pdfs!.filter(x => x.Id !== file.Id);\n        tempFileArray!.splice(index - 1, 0, file);\n\n        setSessionState(prevState => ({\n            ...prevState,\n            Pdfs: tempFileArray\n        }));\n    }\n\n    const MoveFileDown = (file: UploadedFile): void => {\n        let index: number = sessionState.Pdfs!.indexOf(file);\n        let tempFileArray: UploadedFile[] | null = sessionState.Pdfs!.filter(x => x.Id !== file.Id);\n        tempFileArray!.splice(index + 1, 0, file);\n\n        setSessionState(prevState => ({\n            ...prevState,\n            Pdfs: tempFileArray\n        }));\n    }\n\n    const Submit = (): void => {\n        setSessionState(prevState => ({\n            ...prevState,\n            SubmitMessage: `Merging ${sessionState.Pdfs!.length} PDF files, please have patience... ⏳`,\n            IsSubmitCompleted: true\n        }));\n    }\n\n    return (\n        <div>\n            <div className=\"sub-header\">\n                <h1>PDF Merger</h1>\n            </div>\n\n            <div>\n                <h2 style={{ fontSize: 21 }} className=\"sub-tools\">Upload your PDF files.</h2>\n                <h4 className=\"sub-tools\">Limit - 20 Files / 20 MB Each</h4>\n            </div>\n\n            <div className=\"dropzone\">\n                <input onChange={e => onInputFileChange(e.target.files)} type=\"file\" multiple accept=\"application/pdf\" title=\"\" />\n                Drag And Drop Files Or Click To Upload.\n            </div>\n\n            {sessionState.IsUploadInitiated ? ((!sessionState.IsUploadCompleted && !sessionState.Error) ? <UploadLoader UploadMessage={sessionState.UploadMessage} /> : <UploadDone UploadMessage={sessionState.UploadMessage} ErrorMessage={sessionState.ErrorMessage} />) : \"\"}\n\n            {(sessionState.IsUploadCompleted && !sessionState.Error) ? <FileListDisplay FileArray={sessionState.Pdfs} RemoveFile={RemoveFile} MoveFileUp={MoveFileUp} MoveFileDown={MoveFileDown} /> : \"\"}\n\n            {(sessionState.IsUploadCompleted && !sessionState.Error && !sessionState.IsSubmitCompleted) ? <SubmitButton Submit={Submit} /> : \"\"}\n\n            {sessionState.IsSubmitCompleted ? <SubmitProgress SubmitMessage={sessionState.SubmitMessage} /> : \"\"}\n        </div>\n    );\n}\n\nexport default Merger;","import React, { ReactElement } from \"react\";\n\nconst PageDeleter: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Page Deleter</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default PageDeleter;","import React, { ReactElement } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport \"@fortawesome/fontawesome-free/css/all.css\"\nimport '../assets/App.css';\nimport '../assets/Loader.css';\nimport Encryptor from '../components/Encryptor';\nimport Home from '../components/Home';\nimport ImageToPdf from '../components/ImageToPdf';\nimport Merger from '../components/merger/Merger';\nimport PageDeleter from '../components/PageDeleter';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <div>\n            \n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/pdfmerger\" exact component={Merger} />\n                    <Route path=\"/pdfencryptor\" exact component={Encryptor} />\n                    <Route path=\"/pdfpagedeleter\" exact component={PageDeleter} />\n                    <Route path=\"/imagetopdf\" exact component={ImageToPdf} />\n                </Switch>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}