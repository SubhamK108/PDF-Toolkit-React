{"version":3,"sources":["components/Encryptor.tsx","components/Home.tsx","components/ImageToPdf.tsx","components/Merger.tsx","components/PageDeleter.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Encryptor","className","Home","to","ImageToPdf","Merger","useState","fileArray","setFileArray","totalFiles","setTotalFiles","uploadDone","setUploadDone","style","fontSize","onChange","e","inputFileChange","console","clear","files","totalFiles2","length","i","fileName","name","fileSize","Math","round","size","log","concat","onInputFileChange","target","type","multiple","accept","title","UploadLoader","FilesDisplay","props","map","file","lastModified","PageDeleter","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.09bd3089.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\nconst Encryptor: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Encryptor</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Encryptor;","import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Toolkit</h1>\n            </div>\n\n            <div className=\"tools\">\n                <h1>Available Tools</h1>\n            </div>\n\n            <div className=\"tools-section\">\n                <Link to=\"/pdfmerger\">\n                    <button className=\"button\">Merger</button>\n                </Link>\n\n                <Link to=\"/pdfencryptor\">\n                    <button className=\"button\">Encryptor</button>\n                </Link>\n\n                <Link to=\"/pdfpagedeleter\">\n                    <button className=\"button\">Page Deleter</button>\n                </Link>\n                \n                <Link to=\"imagetopdf\">\n                    <button className=\"button\">Image to PDF</button>\n                </Link>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Home;","import React, { ReactElement } from \"react\";\n\nconst ImageToPdf: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>Image To PDF</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageToPdf;","import React, { ReactElement, useState } from \"react\";\nimport \"../assets/Loader.css\";\n\n\ninterface FilesDisplayProps {\n    files: File[]\n};\n\n\nconst Merger: React.FC = (): ReactElement => {\n\n    const [fileArray, setFileArray] = useState<File[]>([]);\n    const [totalFiles, setTotalFiles] = useState<number>(0);\n    const [uploadDone, setUploadDone] = useState<boolean>(false);\n\n    const onInputFileChange = (inputFileChange: FileList | null) => {\n        console.clear();\n        let files: FileList | null = inputFileChange;\n        let totalFiles2: number = files!.length;\n\n        for (let i: number = 0; i < totalFiles2; i++) {\n            let fileName: string = files![i].name;\n            let fileSize: number = Math.round(files![i].size / 1024);\n\n            console.log(`File - ${i + 1} Details:`);\n            console.log(`File Name: ${fileName}`);\n            console.log(`File Size: ${fileSize} KB`);\n            console.log(\"\");\n\n            setFileArray(fileArray => fileArray.concat(files![i]));\n        }\n\n        setTotalFiles(files!.length);\n        setUploadDone(true);\n    }\n\n    return (\n        <div>\n\n            <div className=\"sub-header\">\n                <h1>PDF Merger</h1>\n            </div>\n\n            <div>\n                <h2 style={{fontSize: 21}} className=\"sub-tools\">Upload your PDF files.</h2>\n                <h4 className=\"sub-tools\">Limit - 20 Files / 20 MB Each</h4>\n            </div>\n\n            <div className=\"dropzone\">\n                <input onChange={e => onInputFileChange(e.target.files)} type=\"file\" multiple accept=\"application/pdf\" title=\"\" />\n                Drag and Drop or Click to Upload.\n            </div>\n\n            {uploadDone === false ? \"\" : (totalFiles === 0 ? <UploadLoader /> : <FilesDisplay files={fileArray} />)}\n\n        </div>\n    );\n}\n\nexport default Merger;\n\n\nconst UploadLoader: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <h2 style={{fontSize: 21}} className=\"sub-tools\">Uploading...</h2>\n            <div className=\"loader\">Loading...</div>\n\n        </div>\n    );\n}\n\n\nconst FilesDisplay: React.FC<FilesDisplayProps> = (props): ReactElement => {\n    return (\n        <div>\n\n            {props.files.map((file: File) => (\n                <h4 key={file.lastModified} className=\"sub-tools\">{file.name}</h4>\n            ))}\n\n        </div>\n    );\n}","import React, { ReactElement } from \"react\";\n\nconst PageDeleter: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Page Deleter</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default PageDeleter;","import React, { ReactElement } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../assets/App.css';\nimport Encryptor from '../components/Encryptor';\nimport Home from '../components/Home';\nimport ImageToPdf from '../components/ImageToPdf';\nimport Merger from '../components/Merger';\nimport PageDeleter from '../components/PageDeleter';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <div>\n            \n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/pdfmerger\" exact component={Merger} />\n                    <Route path=\"/pdfencryptor\" exact component={Encryptor} />\n                    <Route path=\"/pdfpagedeleter\" exact component={PageDeleter} />\n                    <Route path=\"/imagetopdf\" exact component={ImageToPdf} />\n                </Switch>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}