{"version":3,"sources":["components/Encryptor.tsx","components/Home.tsx","components/ImageToPdf.tsx","components/Merger.tsx","components/PageDeleter.tsx","app/App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Encryptor","className","Home","to","ImageToPdf","Merger","style","fontSize","type","PageDeleter","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAceA,EAZa,WACxB,OACI,8BAEI,qBAAKC,UAAU,SAAf,SACI,oDC8BDC,EAlCQ,WACnB,OACI,gCAEI,qBAAKD,UAAU,SAAf,SACI,+CAGJ,qBAAKA,UAAU,QAAf,SACI,mDAGJ,sBAAKA,UAAU,gBAAf,UACI,cAAC,IAAD,CAAME,GAAG,aAAT,SACI,wBAAQF,UAAU,SAAlB,sBAGJ,cAAC,IAAD,CAAME,GAAG,gBAAT,SACI,wBAAQF,UAAU,SAAlB,yBAGJ,cAAC,IAAD,CAAME,GAAG,kBAAT,SACI,wBAAQF,UAAU,SAAlB,4BAGJ,cAAC,IAAD,CAAME,GAAG,aAAT,SACI,wBAAQF,UAAU,SAAlB,mCCfLG,EAZc,WACzB,OACI,8BAEI,qBAAKH,UAAU,SAAf,SACI,mDCiBDI,EAtBU,WACrB,OACI,gCAEI,qBAAKJ,UAAU,aAAf,SACI,8CAGJ,gCACI,oBAAIK,MAAO,CAACC,SAAU,IAAKN,UAAU,YAArC,oCACA,oBAAIA,UAAU,YAAd,8CAGJ,sBAAKA,UAAU,WAAf,UACI,uBAAOO,KAAK,SADhB,2CCDGC,EAZe,WAC1B,OACI,8BAEI,qBAAKR,UAAU,SAAf,SACI,uDCoBDS,EAlBO,WAClB,OACI,8BAEI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,cAAC,IAAD,CAAOS,KAAK,aAAaC,OAAK,EAACC,UAAWR,IAC1C,cAAC,IAAD,CAAOM,KAAK,gBAAgBC,OAAK,EAACC,UAAWb,IAC7C,cAAC,IAAD,CAAOW,KAAK,kBAAkBC,OAAK,EAACC,UAAWJ,IAC/C,cAAC,IAAD,CAAOE,KAAK,cAAcC,OAAK,EAACC,UAAWT,YCP3CU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4561f5fa.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\nconst Encryptor: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Encryptor</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Encryptor;","import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Toolkit</h1>\n            </div>\n\n            <div className=\"tools\">\n                <h1>Available Tools</h1>\n            </div>\n\n            <div className=\"tools-section\">\n                <Link to=\"/pdfmerger\">\n                    <button className=\"button\">Merger</button>\n                </Link>\n\n                <Link to=\"/pdfencryptor\">\n                    <button className=\"button\">Encryptor</button>\n                </Link>\n\n                <Link to=\"/pdfpagedeleter\">\n                    <button className=\"button\">Page Deleter</button>\n                </Link>\n                \n                <Link to=\"imagetopdf\">\n                    <button className=\"button\">Image to PDF</button>\n                </Link>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Home;","import React, { ReactElement } from \"react\";\n\nconst ImageToPdf: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>Image To PDF</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default ImageToPdf;","import React, { ReactElement } from \"react\";\n\nconst Merger: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"sub-header\">\n                <h1>PDF Merger</h1>\n            </div>\n\n            <div>\n                <h2 style={{fontSize: 21}} className=\"sub-tools\">Upload your PDF files.</h2>\n                <h4 className=\"sub-tools\">Limit - 20 Files / 20 MB Each</h4>\n            </div>\n\n            <div className=\"dropzone\">\n                <input type=\"file\" />\n                Drag and Drop or Click to Upload.\n            </div>\n\n        </div>\n    );\n}\n\nexport default Merger;","import React, { ReactElement } from \"react\";\n\nconst PageDeleter: React.FC = (): ReactElement => {\n    return (\n        <div>\n\n            <div className=\"header\">\n                <h1>PDF Page Deleter</h1>\n            </div>\n\n        </div>\n    );\n}\n\nexport default PageDeleter;","import React, { ReactElement } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../assets/App.css';\nimport Encryptor from '../components/Encryptor';\nimport Home from '../components/Home';\nimport ImageToPdf from '../components/ImageToPdf';\nimport Merger from '../components/Merger';\nimport PageDeleter from '../components/PageDeleter';\n\nconst App: React.FC = (): ReactElement => {\n    return (\n        <div>\n            \n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/pdfmerger\" exact component={Merger} />\n                    <Route path=\"/pdfencryptor\" exact component={Encryptor} />\n                    <Route path=\"/pdfpagedeleter\" exact component={PageDeleter} />\n                    <Route path=\"/imagetopdf\" exact component={ImageToPdf} />\n                </Switch>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}